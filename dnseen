#!/usr/bin/env bb

(ns dnseen
  (:require
   [clojure.edn :refer [read-string]]
   [clojure.set :refer [union]]
   [clojure.string :as str]
   [clojure.pprint :as p]
   [babashka.cli :as cli]
   [babashka.fs :as fs]))

;; Config parameters parsing helpers

(defn str->dt [s] (java.time.LocalDateTime/parse s))
(defn str->regex [s] (re-pattern s))

(def log-file "/var/log/dnseen.log")
(def config-file "config.edn")

(defn config-file-default
  "Return a path to the default config file"
  []
  (let [config-dir (fs/xdg-config-home "dnseen")]
    (fs/path config-dir config-file)))

(defn load-config-file
  "Return a map with config loaded from the edn config file"
  [p]
  (let [path (fs/expand-home p)]
    (when (and (fs/exists? path)
               (fs/regular-file? path))
      (try (-> path
               str
               slurp
               read-string)
           (catch java.lang.IllegalArgumentException e
             (print (.getMessage e))
             nil)))))

(defn remove-nil-vals
  "Remove key-values pairs from the given map where value is nil"
  [m]
  (into {} (remove (fn [[_ v]] (nil? v)) m)))

;; NB! defaults are not provided as they are defined in the `settings` fn below.
;; This is to ensure configuration parameters are applied in the correct order.
(def cli-spec
  {:hosts {:desc "Hosts file path. If path is a directory, recursivelly find all the files under the path. Defaults to /etc/hosts. More than one hosts option can be passed in."
           :coerce []}
   :from {:desc "Start timestamp (inclusive) in ISO-8601 LocalDateTime format to filter logs. Defaults to the first log entry's timestamp. Example: '1970-01-01T00:00:00'"
          :alias :f
          :default nil
          :coerce str->dt}
   :to {:desc "End timestamp (inclusive) in ISO-8601 LocalDateTime format to filter logs. Defaults to the last log entry's timestamp. Example: '2023-12-31T23:59:59.999'"
        :alias :t
        :default nil
        :coerce str->dt}
   :match {:desc "Perl-compatible regular expression to match domain names from the logs. Example: '(google|goog)$'"
           :alias :m
           :default nil
           :coerce str->regex}
   :exclude {:desc "Perl-compatible regular expression to exclude domain names from the logs. Example: '(?i).*(dnsleaktest|firefox|fedoraproject)'"
             :alias :e
             :default nil
             :coerce str->regex}
   :hits {:desc "Output domains with the given number of hits or above."
          :default nil
          :coerce :int}
   :head {:desc "Output the first N domains. Applied as the last filter to the report."
          :default nil
          :coerce :int}
   :verbose {:desc "Verbosity. Multiple flags combine"
             :alias :v
             :coerce []}
   :pretty {:desc "Pretty print a report in tabular format. Defaults to true. Use --no-pretty for plain text."
            :default nil}
   :totals {:desc "Show totals stats. :raw-logs - number of log items parsed from the log-file; :block-list - number of domains to be resolved to localhost or 0.0.0.0 from the hosts files provided (blocking); :queries - number of domain hits after filters applied; :blocked - number of blocked queries; :blocked-share - percentage of blocked queries. Use --no-total to suppress totals. Defaults to false."
            :default nil}
   :config {:desc "A path to the config file in EDN format. Keys are defined as CLI options prefixed with `:`, e.g. :hosts, :totals, :verbose, etc. Defaults to /dnseen/config.edn either under $XDG_CONFIG_HOME/ if set or under $HOME/.config/"
            :alias :c
            ;; Path to config cannot be overriden from the config file,
            ;; so keep the defaults here
            :default (config-file-default)}
   :help {:desc "Print help message"
          :alias :h
          :coerce :boolean}})

;; NB! Extend the vector when a new option is added to the `cli-spec`
(def opts-ordered
  [:hosts :from :to :match :exclude :hits :head :pretty :totals
   :config :help])

;; Process hosts file

(defn parse-hosts-line
  [line]
  (let [[ip canonical & _]
        (-> line
            (str/replace #"#.*$" "")
            str/trim
            (str/split #"\s+"))]
    (if canonical
      [ip canonical]
      [nil nil])))

(defn localhost?
  "Return true if given IP address is a loopback, localhost or 0.0.0.0"
  [ip]
  (cond
    (= ip "0.0.0.0") true
    (= ip "127.0.0.1") true
    (= ip "::") true
    (= ip "::1") true
    (= ip "0:0:0:0:0:0:0:0") true
    (= ip "0:0:0:0:0:0:0:1") true
    (= ip "0000:0000:0000:0000:0000:0000:0000:0000") true
    (= ip "0000:0000:0000:0000:0000:0000:0000:0001") true
    :else false))

(defn hosts-file->blocked
  "Parse given hosts file into a set of blocked hostnames.
  Hostname is considered blocked if it's resolved to localhost."
  [hosts-file]
  (let [hosts (->> hosts-file
                   slurp
                   str/split-lines)
        result (reduce
                (fn [acc line]
                  (let [[ip canonical] (parse-hosts-line line)]
                    (if (localhost? ip)
                      (conj acc canonical)
                      acc)))
                #{} hosts)]
    result))

(defn parse-hosts-path
  "Parse all the hosts files under the given path and return a set of
  blocked hostnames"
  [path]
  (let [path-expanded (fs/expand-home path)
        paths (if (fs/regular-file? path-expanded)
                [path-expanded]
                (fs/glob path-expanded "**"))
        files (filter fs/regular-file? paths)
        hosts (reduce
               (fn [acc file]
                 (union acc (-> file
                                str
                                hosts-file->blocked)))
               #{} files)]
    hosts))

(defn parse-hosts
  [opts]
  (reduce
   (fn [acc path]
     (union acc (parse-hosts-path path)))
   #{} (:hosts opts)))

;; Process logs

(defn split-cols
  [s]
  (str/split s #"\s+"))

(defn valid-domain?
  "Return true if a domain name ends with a dot char"
  [[_ _ domain]]
  (str/ends-with? domain "."))

(defn parse-log-entry
  "Convert timestamps to LocalDateTime, prettify domain names"
  [[date time url]]
  (let [dt (java.time.LocalDateTime/parse (str date "T" time))
        domain (subs url 0 (dec (count url)))]
    [dt domain]))

(defn dt-in-range?
  "Return true if the given timestamp is in the range [from, to]"
  [from to [dt _]]
  (and
   (or (.isAfter dt from) (.isEqual dt from))
   (or (.isBefore dt to) (.isEqual dt to))))

(defn parse-logs
  "Parse log-file into a sequence of [timestamp domain] vectors"
  []
  (->> log-file
       slurp
       str/split-lines
       (map split-cols)
       (filter valid-domain?)
       (map parse-log-entry)))

(defn- logs-dt-range
  "Return a start and an end timestamps of the given logs seq"
  [logs]
  (let [start (->> logs first first)
        end (->> logs last first)]
    {:start start :end end}))

(defn settings
  "Take CLI opts, config file and defaults and return the settings

  Configuration parameters are applied in order of precedence, from
  highest to lowest:
  - CLI options
  - User-level configuration (e.g. ~/HOME/.config/dnseen/config.edn)
  - System default configuration

  See details:
  https://clig.dev/#configuration"
  [logs opts config]
  (let [{:keys [start end]} (logs-dt-range logs)
        logs-total (count logs)
        defaults {:hosts ["/etc/hosts"]
                  :from start
                  :to end
                  :match nil
                  :exclude nil
                  :hits 0
                  :head logs-total
                  :pretty true
                  :totals false
                  :config nil  ;; defined in cli-spec defaults
                  :logs logs-total}]
    (merge
     (remove-nil-vals defaults)
     (remove-nil-vals config)
     (remove-nil-vals opts))))

(defn filter-logs
  "Apply filters to the logs before aggregating"
  [opts logs]
  (let [{:keys [from to exclude match]} opts]
    (->> logs
         (filter (partial dt-in-range? from to))
         (filter (fn [[_ domain]] (if match (re-find match domain) true)))
         (remove (fn [[_ domain]] (if exclude (re-find exclude domain) false))))))

;; Stats

(defn filter-stats
  "Apply filters to the aggregated stats seq of [domain hits] vectors"
  [opts stats]
  (->> stats
       (filter (fn [[_ hits]] (>= hits (:hits opts))))
       (take (:head opts))))

(defn stats-totals
  [opts stats hosts]
  (let [totals (reduce
                (fn [acc val]
                  (let [[_ hits blocked?] val
                        blocked (if blocked? hits 0)]
                    (-> acc
                        (update :queries + hits)
                        (update :blocked + blocked))))
                {:raw-logs (:logs opts)
                 :block-list (count hosts)
                 :queries 0
                 :blocked 0}
                stats)
        blocked-share (format "%.2f%s"
                              (float (/ (* (:blocked totals) 100)
                                        (:queries totals)))
                              "%")
        result (assoc totals :blocked-share blocked-share)]
    result))

(defn stats-report
  "Return a start report with a top-list of domain hits in desc order"
  [opts logs hosts]
  (let [stats (->> logs
                   (filter-logs opts)
                   (map second)
                   frequencies
                   (sort-by second)
                   (map (fn [[domain freq]]
                          [domain freq (contains? hosts domain)]))
                   reverse
                   (filter-stats opts)
                   (into []))
        totals (stats-totals opts stats hosts)]
    {:stats stats
     :totals totals
     :opts opts}))

;; Representation

(defn opts->str
  "Format non-nil opts as strings"
  [opts]
  (let [opts (->>
              opts
              (remove (fn [[_ v]] (nil? v)))
              (map (fn [[k v]]
                     (cond
                       (number? v) [k v]
                       (boolean? v) [k v]
                       (coll? v) [k (str/join "," v)]
                       :else [k (str v)])))
              (into {}))]
     opts))

(defn out-opts!
  "Print query options used"
  [report]
  (let [opts (:opts report)
        query (opts->str opts)
        verbosity (count (:verbose opts))]
    (when (>= verbosity 1)
      (println)
      (println :params)
      (p/pprint query))
    report))

(defn- keywordize-stats
  [stats]
  (reduce
   (fn [acc [domain hits blocked]]
     (conj acc {:domain domain :hits hits :blocked blocked})) [] stats))

(defn- stringify-stats
  [stats]
  (->>
   stats
   (map (fn [[domain hits blocked]] (format "%s %s %s" domain hits blocked)))
   (str/join "\n")))

(defn out-report!
  "Print stats report to the standard output"
  [report]
  (let [{:keys [stats opts]} report]
    (if (:pretty opts)
      (p/print-table (keywordize-stats stats))
      (println (stringify-stats stats)))
    report))

(defn out-totals!
  "Print totals"
  [report]
  (let [totals (opts->str (:totals report))]
    (when (get-in report [:opts :totals])
      (println)
      (println :totals)
      (p/pprint totals))
    report))

;; CLI options

(defn cli->opts
  "Parse CLI options"
  []
  (cli/parse-opts *command-line-args* {:spec cli-spec}))

(defn out-help!
  "Print help message"
  []
  (println (cli/format-opts {:spec cli-spec :order opts-ordered})))

;; Entrypoint

(defn exec!
  "Entrypoint"
  []
  (let [opts (cli->opts)]
    (if (:help opts)
      (out-help!)
      (let [logs (parse-logs)
            config (load-config-file (:config opts))
            opts (settings logs opts config)
            hosts (parse-hosts opts)]
        (-> opts
            (stats-report logs hosts)
            out-report!
            out-totals!
            out-opts!)))))

(when (= *file* (System/getProperty "babashka.file"))
  (exec!))
